{"uid":"7b650a482e7889a9","name":"test_web_table_add_person[input_data282]","fullName":"tests.elements_page_test.TestWebTables#test_web_table_add_person","historyId":"fb141f0719a39a79079f29bc6da0bcc9","time":{"start":1693430917798,"stop":1693430919166,"duration":1368},"description":" Check if one new person could be added in the list ","descriptionHtml":"<p>Check if one new person could be added in the list</p>\n","status":"skipped","statusMessage":"XFAIL Negative data tests\n\nAssertionError: Registration Form is not closed after submitting!\nassert 0 == 1\n +  where 0 = <bound method WebTablesPage.get_form_status_is_closed of <pages.element_page.WebTablesPage object at 0x000000C3A8658C50>>()\n +    where <bound method WebTablesPage.get_form_status_is_closed of <pages.element_page.WebTablesPage object at 0x000000C3A8658C50>> = <pages.element_page.WebTablesPage object at 0x000000C3A8658C50>.get_form_status_is_closed\n +      where <pages.element_page.WebTablesPage object at 0x000000C3A8658C50> = <elements_page_test.TestElements.TestWebTables object at 0x000000C3A83384D0>.web_table_page","statusTrace":"self = <elements_page_test.TestElements.TestWebTables object at 0x000000C3A83384D0>\ninput_data = ['4', '25aaaaaaaaaaaaaaaaaaalast', 'ab.com', '99', '9999999999', 'MixDeP']\n\n    def test_web_table_add_person(self, input_data):\n        \"\"\" Check if one new person could be added in the list \"\"\"\n        expected_person = self.web_table_page.create_specified_person(input_data)\n    \n        with allure.step('Check if form is closed'):\n>           assert self.web_table_page.get_form_status_is_closed() == 1, \\\n                'Registration Form is not closed after submitting!'\nE           AssertionError: Registration Form is not closed after submitting!\nE           assert 0 == 1\nE            +  where 0 = <bound method WebTablesPage.get_form_status_is_closed of <pages.element_page.WebTablesPage object at 0x000000C3A8658C50>>()\nE            +    where <bound method WebTablesPage.get_form_status_is_closed of <pages.element_page.WebTablesPage object at 0x000000C3A8658C50>> = <pages.element_page.WebTablesPage object at 0x000000C3A8658C50>.get_form_status_is_closed\nE            +      where <pages.element_page.WebTablesPage object at 0x000000C3A8658C50> = <elements_page_test.TestElements.TestWebTables object at 0x000000C3A83384D0>.web_table_page\n\ntests\\elements_page_test.py:85: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1693430445726,"stop":1693430445820,"duration":94},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0},{"name":"driver","time":{"start":1693430468302,"stop":1693430474075,"duration":5773},"status":"passed","steps":[{"name":"Start Firefox engine","time":{"start":1693430468302,"stop":1693430474075,"duration":5773},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"stepsCount":1},{"name":"web_table_setup","time":{"start":1693430917554,"stop":1693430917794,"duration":240},"status":"passed","steps":[{"name":"Setup WebTablesPage object and open its url","time":{"start":1693430917554,"stop":1693430917794,"duration":240},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"stepsCount":1},{"name":"screenshot_on_failure","time":{"start":1693430917554,"stop":1693430917554,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0}],"testStage":{"description":" Check if one new person could be added in the list ","status":"skipped","statusMessage":"XFAIL Negative data tests\n\nAssertionError: Registration Form is not closed after submitting!\nassert 0 == 1\n +  where 0 = <bound method WebTablesPage.get_form_status_is_closed of <pages.element_page.WebTablesPage object at 0x000000C3A8658C50>>()\n +    where <bound method WebTablesPage.get_form_status_is_closed of <pages.element_page.WebTablesPage object at 0x000000C3A8658C50>> = <pages.element_page.WebTablesPage object at 0x000000C3A8658C50>.get_form_status_is_closed\n +      where <pages.element_page.WebTablesPage object at 0x000000C3A8658C50> = <elements_page_test.TestElements.TestWebTables object at 0x000000C3A83384D0>.web_table_page","statusTrace":"self = <elements_page_test.TestElements.TestWebTables object at 0x000000C3A83384D0>\ninput_data = ['4', '25aaaaaaaaaaaaaaaaaaalast', 'ab.com', '99', '9999999999', 'MixDeP']\n\n    def test_web_table_add_person(self, input_data):\n        \"\"\" Check if one new person could be added in the list \"\"\"\n        expected_person = self.web_table_page.create_specified_person(input_data)\n    \n        with allure.step('Check if form is closed'):\n>           assert self.web_table_page.get_form_status_is_closed() == 1, \\\n                'Registration Form is not closed after submitting!'\nE           AssertionError: Registration Form is not closed after submitting!\nE           assert 0 == 1\nE            +  where 0 = <bound method WebTablesPage.get_form_status_is_closed of <pages.element_page.WebTablesPage object at 0x000000C3A8658C50>>()\nE            +    where <bound method WebTablesPage.get_form_status_is_closed of <pages.element_page.WebTablesPage object at 0x000000C3A8658C50>> = <pages.element_page.WebTablesPage object at 0x000000C3A8658C50>.get_form_status_is_closed\nE            +      where <pages.element_page.WebTablesPage object at 0x000000C3A8658C50> = <elements_page_test.TestElements.TestWebTables object at 0x000000C3A83384D0>.web_table_page\n\ntests\\elements_page_test.py:85: AssertionError","steps":[{"name":"Create specified person","time":{"start":1693430917798,"stop":1693430918650,"duration":852},"status":"passed","steps":[{"name":"\"Add\" click","time":{"start":1693430917798,"stop":1693430918098,"duration":300},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0},{"name":"Fill the form","time":{"start":1693430918098,"stop":1693430918402,"duration":304},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0},{"name":"\"Submit\" click","time":{"start":1693430918402,"stop":1693430918650,"duration":248},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0}],"attachments":[],"parameters":[{"name":"input_list","value":"['4', '25aaaaaaaaaaaaaaaaaaalast', 'ab.com', '99', '9999999999', 'MixDeP']"}],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"stepsCount":3},{"name":"Check if form is closed","time":{"start":1693430918650,"stop":1693430919166,"duration":516},"status":"failed","statusMessage":"AssertionError: Registration Form is not closed after submitting!\nassert 0 == 1\n +  where 0 = <bound method WebTablesPage.get_form_status_is_closed of <pages.element_page.WebTablesPage object at 0x000000C3A8658C50>>()\n +    where <bound method WebTablesPage.get_form_status_is_closed of <pages.element_page.WebTablesPage object at 0x000000C3A8658C50>> = <pages.element_page.WebTablesPage object at 0x000000C3A8658C50>.get_form_status_is_closed\n +      where <pages.element_page.WebTablesPage object at 0x000000C3A8658C50> = <elements_page_test.TestElements.TestWebTables object at 0x000000C3A83384D0>.web_table_page\n","statusTrace":"  File \"C:\\Users\\Ник\\PycharmProjects\\TestingUIForGit_POM\\tests\\elements_page_test.py\", line 85, in test_web_table_add_person\n    assert self.web_table_page.get_form_status_is_closed() == 1, \\\n","steps":[{"name":"Get form status","time":{"start":1693430918650,"stop":1693430919166,"duration":516},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"hasContent":true,"stepsCount":1}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"hasContent":true,"stepsCount":6},"afterStages":[{"name":"screenshot_on_failure::0","time":{"start":1693430919190,"stop":1693430919350,"duration":160},"status":"passed","steps":[],"attachments":[{"uid":"c85e1e9ab1c1b828","name":"test_web_table_add_person[input_data282]-2023-08-31-00-28-39.190460","source":"c85e1e9ab1c1b828.png","type":"image/png","size":180916}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"hasContent":true,"stepsCount":0},{"name":"driver::0","time":{"start":1693431164077,"stop":1693431165754,"duration":1677},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0}],"labels":[{"name":"feature","value":"Web Tables page has a person's data list and functions add/edit/delete for it"},{"name":"subSuite","value":"Web Tables"},{"name":"suite","value":"Elements"},{"name":"tag","value":"@pytest.mark.xfail(True, reason='Negative data tests', run=True)"},{"name":"tag","value":"@pytest.mark.usefixtures('web_table_setup')"},{"name":"parentSuite","value":"tests"},{"name":"host","value":"Nick"},{"name":"thread","value":"7104-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.elements_page_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"input_data","value":"['4', '25aaaaaaaaaaaaaaaaaaalast', 'ab.com', '99', '9999999999', 'MixDeP']"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"tags":["@pytest.mark.xfail(True, reason='Negative data tests', run=True)","@pytest.mark.usefixtures('web_table_setup')"]},"source":"7b650a482e7889a9.json","parameterValues":["['4', '25aaaaaaaaaaaaaaaaaaalast', 'ab.com', '99', '9999999999', 'MixDeP']"]}