{"uid":"f143f0aada0bd091","name":"test_web_table_add_random_valid_persons[2]","fullName":"tests.elements_page_test.TestWebTables#test_web_table_add_random_valid_persons","historyId":"33ada260a9710c3b1187ecf8b0f3f19e","time":{"start":1693431125541,"stop":1693431127543,"duration":2002},"description":" Check if 'how_much' new random persons could be added in the list ","descriptionHtml":"<p>Check if 'how_much' new random persons could be added in the list</p>\n","status":"failed","statusMessage":"AssertionError: Persons are not in the list.\nassert False\n +  where False = all(<generator object TestElements.TestWebTables.test_web_table_add_random_valid_persons.<locals>.<genexpr> at 0x000000C3A845E6C0>)","statusTrace":"self = <elements_page_test.TestElements.TestWebTables object at 0x000000C3A8369010>, how_much = 2\n\n    @pytest.mark.parametrize('how_much', [2])\n    def test_web_table_add_random_valid_persons(self, how_much):\n        \"\"\" Check if 'how_much' new random persons could be added in the list \"\"\"\n        input_persons = self.web_table_page.create_random_valid_persons(how_much)\n        output_persons = self.web_table_page.get_all_persons()\n    \n        with allure.step('Check if persons in the list'):\n>           assert all(item in input_persons for item in output_persons), 'Persons are not in the list.'\nE           AssertionError: Persons are not in the list.\nE           assert False\nE            +  where False = all(<generator object TestElements.TestWebTables.test_web_table_add_random_valid_persons.<locals>.<genexpr> at 0x000000C3A845E6C0>)\n\ntests\\elements_page_test.py:100: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1693430445726,"stop":1693430445820,"duration":94},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0},{"name":"driver","time":{"start":1693430468302,"stop":1693430474075,"duration":5773},"status":"passed","steps":[{"name":"Start Firefox engine","time":{"start":1693430468302,"stop":1693430474075,"duration":5773},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"stepsCount":1},{"name":"screenshot_on_failure","time":{"start":1693431125297,"stop":1693431125297,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0},{"name":"web_table_setup","time":{"start":1693431125297,"stop":1693431125541,"duration":244},"status":"passed","steps":[{"name":"Setup WebTablesPage object and open its url","time":{"start":1693431125297,"stop":1693431125541,"duration":244},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"stepsCount":1}],"testStage":{"description":" Check if 'how_much' new random persons could be added in the list ","status":"failed","statusMessage":"AssertionError: Persons are not in the list.\nassert False\n +  where False = all(<generator object TestElements.TestWebTables.test_web_table_add_random_valid_persons.<locals>.<genexpr> at 0x000000C3A845E6C0>)","statusTrace":"self = <elements_page_test.TestElements.TestWebTables object at 0x000000C3A8369010>, how_much = 2\n\n    @pytest.mark.parametrize('how_much', [2])\n    def test_web_table_add_random_valid_persons(self, how_much):\n        \"\"\" Check if 'how_much' new random persons could be added in the list \"\"\"\n        input_persons = self.web_table_page.create_random_valid_persons(how_much)\n        output_persons = self.web_table_page.get_all_persons()\n    \n        with allure.step('Check if persons in the list'):\n>           assert all(item in input_persons for item in output_persons), 'Persons are not in the list.'\nE           AssertionError: Persons are not in the list.\nE           assert False\nE            +  where False = all(<generator object TestElements.TestWebTables.test_web_table_add_random_valid_persons.<locals>.<genexpr> at 0x000000C3A845E6C0>)\n\ntests\\elements_page_test.py:100: AssertionError","steps":[{"name":"Create random valid user","time":{"start":1693431125541,"stop":1693431127363,"duration":1822},"status":"passed","steps":[{"name":"\"Add\" click","time":{"start":1693431125541,"stop":1693431125829,"duration":288},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0},{"name":"Generate data and fill the form","time":{"start":1693431125829,"stop":1693431125833,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0},{"name":"\"Submit\" click","time":{"start":1693431126209,"stop":1693431126237,"duration":28},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0},{"name":"\"Add\" click","time":{"start":1693431126485,"stop":1693431126757,"duration":272},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0},{"name":"Generate data and fill the form","time":{"start":1693431126757,"stop":1693431126757,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0},{"name":"\"Submit\" click","time":{"start":1693431127095,"stop":1693431127127,"duration":32},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0}],"attachments":[],"parameters":[{"name":"how_much","value":"2"}],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"stepsCount":6},{"name":"Get all persons","time":{"start":1693431127363,"stop":1693431127543,"duration":180},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0},{"name":"Check if persons in the list","time":{"start":1693431127543,"stop":1693431127543,"duration":0},"status":"failed","statusMessage":"AssertionError: Persons are not in the list.\nassert False\n +  where False = all(<generator object TestElements.TestWebTables.test_web_table_add_random_valid_persons.<locals>.<genexpr> at 0x000000C3A845E6C0>)\n","statusTrace":"  File \"C:\\Users\\Ник\\PycharmProjects\\TestingUIForGit_POM\\tests\\elements_page_test.py\", line 100, in test_web_table_add_random_valid_persons\n    assert all(item in input_persons for item in output_persons), 'Persons are not in the list.'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"hasContent":true,"stepsCount":0}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"hasContent":true,"stepsCount":9},"afterStages":[{"name":"screenshot_on_failure::0","time":{"start":1693431127559,"stop":1693431127699,"duration":140},"status":"passed","steps":[],"attachments":[{"uid":"3c3e9bc9f2549e32","name":"test_web_table_add_random_valid_persons[2]-2023-08-31-00-32-07.558913","source":"3c3e9bc9f2549e32.png","type":"image/png","size":259482}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":1,"hasContent":true,"stepsCount":0},{"name":"driver::0","time":{"start":1693431164077,"stop":1693431165754,"duration":1677},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0}],"labels":[{"name":"feature","value":"Web Tables page has a person's data list and functions add/edit/delete for it"},{"name":"subSuite","value":"Web Tables"},{"name":"suite","value":"Elements"},{"name":"tag","value":"@pytest.mark.usefixtures('web_table_setup')"},{"name":"parentSuite","value":"tests"},{"name":"host","value":"Nick"},{"name":"thread","value":"7104-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.elements_page_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"how_much","value":"2"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["@pytest.mark.usefixtures('web_table_setup')"]},"source":"f143f0aada0bd091.json","parameterValues":["2"]}