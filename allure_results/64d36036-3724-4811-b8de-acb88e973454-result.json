{"name": "test_radio_button_no", "status": "skipped", "statusDetails": {"message": "XFAIL reason: [NOTRUN] tag \"radio\" is disabled\n\n_pytest.outcomes.XFailed: [NOTRUN] tag \"radio\" is disabled", "trace": "cls = <class '_pytest.runner.CallInfo'>, func = <function call_runtest_hook.<locals>.<lambda> at 0x000000C3A837E200>, when = 'setup'\nreraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)\n\n    @classmethod\n    def from_call(\n        cls,\n        func: \"Callable[[], TResult]\",\n        when: \"Literal['collect', 'setup', 'call', 'teardown']\",\n        reraise: Optional[\n            Union[Type[BaseException], Tuple[Type[BaseException], ...]]\n        ] = None,\n    ) -> \"CallInfo[TResult]\":\n        \"\"\"Call func, wrapping the result in a CallInfo.\n    \n        :param func:\n            The function to call. Called without arguments.\n        :param when:\n            The phase in which the function is called.\n        :param reraise:\n            Exception or exceptions that shall propagate if raised by the\n            function, instead of being wrapped in the CallInfo.\n        \"\"\"\n        excinfo = None\n        start = timing.time()\n        precise_start = timing.perf_counter()\n        try:\n>           result: Optional[TResult] = func()\n\nvenv\\Lib\\site-packages\\_pytest\\runner.py:341: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\_pytest\\runner.py:262: in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\nvenv\\Lib\\site-packages\\pluggy\\_hooks.py:265: in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nvenv\\Lib\\site-packages\\pluggy\\_manager.py:80: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nitem = <Function test_radio_button_no>\n\n    @hookimpl(tryfirst=True)\n    def pytest_runtest_setup(item: Item) -> None:\n        skipped = evaluate_skip_marks(item)\n        if skipped:\n            raise skip.Exception(skipped.reason, _use_item_location=True)\n    \n        item.stash[xfailed_key] = xfailed = evaluate_xfail_marks(item)\n        if xfailed and not item.config.option.runxfail and not xfailed.run:\n>           xfail(\"[NOTRUN] \" + xfailed.reason)\nE           _pytest.outcomes.XFailed: [NOTRUN] tag \"radio\" is disabled\n\nvenv\\Lib\\site-packages\\_pytest\\skipping.py:243: XFailed"}, "description": " Check if it's possible to select button 'No'", "start": 1693430465352, "stop": 1693430465352, "uuid": "c49104e3-16fc-4865-8070-922b29111ca0", "historyId": "64e4b2d38852735f6bd2887140bac397", "testCaseId": "64e4b2d38852735f6bd2887140bac397", "fullName": "tests.elements_page_test.TestRadioButtons#test_radio_button_no", "labels": [{"name": "subSuite", "value": "Radio Button"}, {"name": "suite", "value": "Elements"}, {"name": "story", "value": "Check radio button \"No\""}, {"name": "feature", "value": "Radio Button page has a feedback question with 3 variants of answers"}, {"name": "tag", "value": "@pytest.mark.xfail(reason='tag \"radio\" is disabled', run=False)"}, {"name": "tag", "value": "@pytest.mark.usefixtures('radio_button_setup')"}, {"name": "parentSuite", "value": "tests"}, {"name": "host", "value": "Nick"}, {"name": "thread", "value": "7104-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.elements_page_test"}]}